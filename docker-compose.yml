services:
  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped
    depends_on:
      api:
        condition: service_started
    networks:
      - app-network

  api:
    build:
      context: API
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./API:/app
    restart: unless-stopped
    environment:
      - LOG_LEVEL=info
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/graphvis
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      db:
        condition: service_healthy
      networkx-mcp:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  networkx-mcp:
    build:
      context: NetworkXMCP
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./NetworkXMCP:/app
    restart: unless-stopped
    environment:
      - LOG_LEVEL=info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./API/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=graphvis
    ports:
      - "5432:5432"
    restart: unless-stopped
    command: ["postgres", "-c", "max_connections=100", "-c", "shared_buffers=128MB"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
